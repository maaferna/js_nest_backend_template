generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int      @id @default(autoincrement())
  username        String
  email           String @unique
  hash            String
  profile         UserProfile?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Add this line to define the opposite relation
  bookStatuses    BookStatus[]

  @@map("users")
}

model UserProfile {
  id            Int      @id @default(autoincrement())
  first_name     String?
  last_name     String?
  profile_image String?
  biography      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Define a one-to-one relation with User
  user User @relation(fields: [userId], references: [id])
  userId Int @unique
}


model Author {
  id    Int      @id @default(autoincrement())
  name  String @unique
  books Book[]   @relation("BookToAuthors")
  @@map("authors")
}

model Category {
  id       Int      @id @default(autoincrement())
  name     String @unique
  books    Book[]   @relation("BookToCategories")
  @@map("categories")
}

model Book {
  id               Int      @id @default(autoincrement())
  title            String
  isbn             String   @unique
  pageCount        Int
  publishedDate    DateTime
  thumbnailUrl     String
  shortDescription String
  longDescription  String
  status           String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  authors    Author[]   @relation("BookToAuthors")
  categories Category[] @relation("BookToCategories")

  // Add a relation to the user's book statuses
  userBookStatuses BookStatus[]
    
  @@map("books")
}

model BookStatus {
  id        Int      @id @default(autoincrement())
  wantToRead Boolean
  currentlyRead Boolean

  // Define a many-to-one relation with User
  user User @relation(fields: [userId], references: [id])
  userId Int
  // Define a many-to-one relation with Book
  book Book @relation(fields: [bookId], references: [id])
  bookId Int

  @@unique([userId, bookId], name: "UserIdBookIdUniqueConstraint")


  @@map("book_statuses")
}
